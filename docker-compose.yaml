version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:4-management-alpine
    ports:
      - "15672:15672" # ui
      - "5672:5672" # amqp
    networks:
      - app-network
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

  postgres:
    image: postgres:16-alpine
    env_file: .env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    ports:
      - "5432:5432"

  ollama:
    image: ollama/ollama:0.6.2
    env_file: .env
    volumes:
      - local-models:/root/.ollama
    networks:
      - app-network
    ports:
      - "11434:11434"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [ gpu ]

  api:
    build:
      dockerfile: api_service/Dockerfile
      context: .
    env_file: .env
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - app-network

  local-transcription-service:
    build:
      dockerfile: local_transcription_service/Dockerfile
      context: .
    env_file: .env
    ports:
      - "8001:8000"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [ gpu ]
    depends_on:
      - rabbitmq
      - api
    networks:
      - app-network
    volumes:
      - local-models:/models

  remote-transcription-service:
    build:
      dockerfile: remote_transcription_service/Dockerfile
      context: .
    env_file:
      - ".env"
      - ".secret.local.env"
    ports:
      - "8005:8000"
    depends_on:
      - rabbitmq
      - api
    networks:
      - app-network

  remote-language-service:
    build:
      dockerfile: remote_language_service/Dockerfile
      context: .
    env_file:
      - ".env"
      - ".secret.local.env"
    ports:
      - "8006:8000"
    depends_on:
      - rabbitmq
      - api
    networks:
      - app-network

  local-language-service:
    build:
      dockerfile: local_language_service/Dockerfile
      context: .
    env_file: .env
    ports:
      - "8002:8000"
    depends_on:
      - rabbitmq
      - api
    networks:
      - app-network

  local-graph-service:
    build:
      dockerfile: local_graph_service/Dockerfile
      context: .
    env_file: .env
    ports:
      - "8003:8000"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [ gpu ]
    depends_on:
      - rabbitmq
      - api
    networks:
      - app-network
    volumes:
      - local-models:/models

  web:
    build:
      dockerfile: web_service/Dockerfile
      context: .
    env_file: .env
    ports:
      - "8004:8000"
    depends_on:
      - api
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:v3.2.1
    volumes:
      - ./.compose-config/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - app-network
#    depends_on:
#      - api

  grafana:
    image: grafana/grafana:11.6.0
    env_file: .env
    volumes:
      - grafana-data:/var/lib/grafana
      - ./.compose-config/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      - prometheus

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  rabbitmq-data:
  local-models:
  prometheus-data:
  grafana-data: